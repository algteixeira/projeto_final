{
    "openapi": "3.0.1",
    "info": {
        "title": "Compassolissa",
        "description": "This is the final project for Compasso UOL trainee's program",
        "contact": {
            "email": "andre.teixeira_bols@compasso.uol.com.br"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:3000",
            "description": "Base URL to use the first version of this project"
        }
    ],

    "components": {
        "schemas": {
            "Person": {
                "type": "object",
                "properties": {
                    "nome": {
                        "type": "string"
                    },
                    "cpf": {
                        "type": "string"
                    },
                    "data_nascimento": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "senha": {
                        "type": "string"
                    },
                    "habilitado": {
                        "type": "string"
                    }
                }
            },
            "People": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Person"
                }
            },
            "Car": {
                "type": "object",
                "properties": {
                    "modelo": {
                        "type": "string"
                    },
                    "cor": {
                        "type": "string"
                    },
                    "ano": {
                        "type": "number"
                    },
                    "acessorios": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "descricao": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "quantidadePassageiros": {
                        "type": "number"
                    }
                }
            },
            "Rental": {
                "type": "object",
                "properties": {
                    "nome": {
                        "type": "string"
                    },
                    "cnpj": {
                        "type": "string"
                    },
                    "atividades": {
                        "type": "string"
                    },
                    "endereco": {
                        "type": "array",
                        "properties": {
                            "cep": {
                                "type": "string"
                            },
                            "number": {
                                "type": "number"
                            },
                            "isFilial": {
                                "type": "boolean"
                            },
                            "complemento": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "Rentals": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Rental"
                }
            },
            "Cars": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Car"
                }
            },
            "Authentication": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "habilitado": {
                        "type": "string"
                    }

                }
            }     ,
            "Fleet": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "id_carro": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "valor_diaria": {
                        "type":"number"
                    },
                    "id_locadora": {
                        "type": "string"
                    },
                    "placa": {
                        "type": "string"
                    }

                }
            },
            "Fleet's": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Fleet"
                }
            },
            "Reserve": {
                "type":"object",
                "properties": {
                    "_id": {
                        "type":"string"
                    },
                    "id_user": {
                        "type":"string"
                    },
                    "data_inicio": {
                        "type":"string"
                    },
                    "data_fim": {
                        "type":"string"
                    },
                    "valor_final": {
                        "type":"number"
                    },
                    "id_locadora": {
                        "type":"string"
                    },
                    "id_carro": {
                        "type":"string"
                    }
                }
            },
            "Reserves": {
                "type":"array",
                "items":{
                    "$ref": "#/components/schemas/Reserve"
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
              "type": "http",
              "scheme": "bearer",
              "bearerFormat": "JWT"
            }
        }
    },

    "paths": {
        "/api/v1/people": {
            "post": {
                "summary": "Insert a person into the database",
                "description": "This route uses req.body to get information about the person, than validate it and insert into the database",
                "tags": [
                    "People"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Person"
                            },
                            "examples": {
                                "person": {
                                    "value": {
                                        "nome": "joaozinho ciclano",
                                        "cpf": "131.147.860-49",
                                        "data_nascimento": "03/03/2021",
                                        "email": "joazinho@email.com",
                                        "senha": "123456",
                                        "habilitado": "sim"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "It shows up when req.body have invalid items to insert, person is an underage or already exists in the database"
                    },
                    "201": {
                        "description": "It shows up when person is created with success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Get all people from the database that match with the queries using pagination",
                "description": "Pagination style = http://localhost:3333/api/v1/car/?page=1&limit=10",
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "It shows up in every request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/People"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Throws it if the request have bad format on the queries"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of cars to show per page. OBRIGATORY QUERY",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The page to show with (limit) amount of cars. OBRIGATORY QUERY",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "nome",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The person name to find"
                    },
                    {
                        "in": "query",
                        "name": "cpf",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The CPF to search for"
                    },
                    {
                        "in": "query",
                        "name": "data_nascimento",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The birthday to find for"
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The email to search for"
                    },
                    {
                        "in": "query",
                        "name": "habilitado",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search based if person have a driver's license"
                    }
                ]
            }
        },
        "/api/v1/car": {
            "post": {
                "security": [{ "bearerAuth": [] }],
                "summary": "Insert a car into the database",
                "description": "This route uses req.body to get information about the car, than remove duplicated accessories if necessary and insert into the database",
                "tags": [
                    "Car"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Car"
                            },
                            "examples": {
                                "car": {
                                    "value": {
                                        "modelo": "GM S10 2.8",
                                        "cor": "branco",
                                        "ano": 2021,
                                        "acessorios": [
                                            {
                                                "descricao": "Ar-condicionado"
                                            },
                                            {
                                                "descricao": "Dir. Hidráulica"
                                            },
                                            {
                                                "descricao": "Cabine Dupla"
                                            },
                                            {
                                                "descricao": "Tração 4x4"
                                            },
                                            {
                                                "descricao": "4 portas"
                                            },
                                            {
                                                "descricao": "Diesel"
                                            },
                                            {
                                                "descricao": "Air bag"
                                            },
                                            {
                                                "descricao": "ABS"
                                            }
                                        ],
                                        "quantidadePassageiros": 5
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "It shows up when car is created with success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Car"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "It shows up when req.body have invalid items to insert"
                    }
                }
            },
            "get": {
                "security": [{ "bearerAuth": [] }],                
                "summary": "Get all cars from the database that match with the queries using pagination",
                "description": "Pagination style = http://localhost:3333/api/v1/car/?page=1&limit=10",
                "tags": [
                    "Cars"
                ],
                "responses": {
                    "200": {
                        "description": "It shows up when have at least 1 entry in the database fitting to the query",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Cars"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "It shows up when there's no car in the database matching to the query"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of cars to show per page. OBRIGATORY QUERY",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The page to show with (limit) amount of cars. OBRIGATORY QUERY",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "modelo",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The car model to search"
                    },
                    {
                        "in": "query",
                        "name": "cor",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The car color to search for"
                    },
                    {
                        "in": "query",
                        "name": "ano",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The year of the car fabrication"
                    },
                    {
                        "in": "query",
                        "name": "descricao",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The description of the accessories"
                    },
                    {
                        "in": "query",
                        "name": "quantidadePassageiros",
                        "schema": {
                            "type": "number"
                        },
                        "description": "The amount of passagens that a car can handle"
                    }
                ]
            }
        },
        "/api/v1/car/{id}": {
            "delete": {
                "security": [{ "bearerAuth": [] }],
                "summary": "Route to delete a car based on it's id",
                "description": "Try to find a vehicle and delete it",
                "tags": [
                    "Car"
                ],
                "responses": {
                    "404": {
                        "description": "Throw a NotFound, telling that there's no car with this id in the database"
                    },
                    "204": {
                        "description": "Car excluded with success"
                    },
                    "400": {
                        "description": "Invalid id format"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "security": [{ "bearerAuth": [] }],
                "summary": "Update car values",
                "description": "Using a car ID, search for it and if it founds, put new values (avoiding duplicates on accessories)",
                "tags": [
                    "Car"
                ],
                "responses": {
                    "200": {
                        "description": "Car updated with success"
                    },
                    "400": {
                        "description": "Wrong id or content format"
                    },
                    "404": {
                        "description": "Car not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Car"
                            },
                            "examples": {
                                "car": {
                                    "value": {
                                        "modelo": "GM S10 2.8",
                                        "cor": "branco",
                                        "ano": "2021",
                                        "acessorios": [
                                            {
                                                "descricao": "Ar-condicionado"
                                            },
                                            {
                                                "descricao": "Dir. Hidráulica"
                                            },
                                            {
                                                "descricao": "Cabine Dupla"
                                            },
                                            {
                                                "descricao": "Tração 4x4"
                                            },
                                            {
                                                "descricao": "4 portas"
                                            },
                                            {
                                                "descricao": "Diesel"
                                            },
                                            {
                                                "descricao": "Air bag"
                                            },
                                            {
                                                "descricao": "ABS"
                                            }
                                        ],
                                        "quantidadePassageiros": 5
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "security": [{ "bearerAuth": [] }],
                "summary": "Get car by id",
                "description": "Return a car based on its id",
                "tags": [
                    "Car"
                ],
                "responses": {
                    "200": {
                        "description": "Return a car with passed ID"
                    },
                    "400": {
                        "description": "Invalid id format"
                    },
                    "404": {
                        "description":"Car not found"
                    }
                
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/car/{id}/acessorios/{id2}": {
            "patch": {
                "security": [{ "bearerAuth": [] }],
                "summary": "Update a car accessory",
                "description": "After update an especific accessory, it should return you the original car",
                "tags": [
                    "Car"
                ],
                
            
                "responses": {
                    "200": {
                        "description": "It returns if the accessory was successfully updated"
                    },
                    "400": {
                        "description": "It returns if the description passed already exists or if there's a format problem in the request"
                    },
                    "404": {
                        "description": "It returns if car or accessory haven't been found in the database"
                    }
                } 
            }
        },
        "/api/v1/people/{id}": {
            "delete": {
                "summary": "Route to delete a person based on it's id",
                "description": "Try to find a person and delete it",
                "tags": [
                    "Person"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "It happens when ID format is wrong"
                    },
                    "204": {
                        "description": "Person excluded with success"
                    },
                    "404": {
                        "description": "Person not found"
                    }
                }
            },
            "put": {
                "summary": "Route to update a person data based it's id",
                "description": "Try to find a person and then update it's data with req.body",
                "tags": [
                    "Person"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "It happens when ID format or content is wrong or when there's already someone with the new CPF or email you're trying to insert"
                    },
                    "200": {
                        "description": "Person data updated with success"
                    },
                    "404": {
                        "description": "Person not found"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Person"
                            },
                            "examples": {
                                "person": {
                                    "value": {
                                        "email": "cenouraabravanel@gmail.com"
                                    }                                       
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Route to get a person data based it's id",
                "description": "Try to find a person",
                "tags": [
                    "Person"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "It happens when ID format is wrong"
                    },
                    "200": {
                        "description": "Person found with success"
                    },
                    "404": {
                        "description": "Person not found"
                    }
                }
            }
        },
        "/api/v1/authenticate": {
            "post": {
                "description": "Authentication route",
                "summary": "Gets an email and password from the body and try to authenticate it. Returns an access token, person email and driver's license situation.",
                "tags": ["Authentication"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Person"
                            },
                            "examples": {
                                "person": {
                                    "value": {
                                        "email": "silviosantos@gmail.com",
                                        "senha": "juninho123"                                        
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "404": {
                        "description": "It shows up if user and/or password is not in the database"
                    },
                    "200": {
                        "description": "It shows up if person is successfully authenticated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Authentication"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "It throws up when you haven't passed the right body (containing email and password)"
                    }
                }
            }
        },
        "/api/v1/rental/": {
            "post": {
                "summary": "Insert a rental into the database",
                "description": "This route uses req.body to get information about the rental, then validate it and insert into the database",
                "tags": [
                    "Rental"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Rental"
                            },
                            "examples": {
                                "rental": {
                                    "value": {
                                        "nome": "joaozinho ciclano",
                                        "cnpj": "16.670.085/0001-55",
                                        "atividades": "Aluguel de Carros E Gestão de Frotas",
                                        "endereco": [      
                                            {
                                                "cep": "96200-200",
                                                "number":"1234",
                                                "isFilial": false
                                            },
                                            {
                                                "cep": "96200-500",
                                                "number":"5678",
                                                "complemento": "Muro A",
                                                "isFilial": true
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "It shows up when req.body have invalid items to insert, or rental name/cnpj already exists in the database"
                    },
                    "201": {
                        "description": "It shows up when rental is created with success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Rental"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Get all rentals from the database that match with the queries using pagination",
                "description": "Pagination style = http://localhost:3333/api/v1/car/?page=1&limit=10",
                "tags": [
                    "Rentals"
                ],
                "responses": {
                    "200": {
                        "description": "It shows up in every request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Rentals"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Throws it if the request have bad format on the queries"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of cars to show per page. OBRIGATORY QUERY",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The page to show with (limit) amount of cars. OBRIGATORY QUERY",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "nome",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The person name to find"
                    },
                    {
                        "in": "query",
                        "name": "cpf",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The CPF to search for"
                    },
                    {
                        "in": "query",
                        "name": "data_nascimento",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The birthday to find for"
                    },
                    {
                        "in": "query",
                        "name": "email",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The email to search for"
                    },
                    {
                        "in": "query",
                        "name": "habilitado",
                        "schema": {
                            "type": "string"
                        },
                        "description": "Search based if person have a driver's license"
                    }
                ]
            }
        },
        "/api/v1/rental/{id}": {
            "delete": {
                "summary": "Route to delete a rental based on it's id",
                "description": "Try to find a rental and delete it",
                "tags": [
                    "Rental"
                ],
                "responses": {
                    "404": {
                        "description": "Throw a NotFound, telling that there's no rental with this id in the database"
                    },
                    "204": {
                        "description": "Rental excluded with success"
                    },
                    "400": {
                        "description": "Invalid id format"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Update rental values",
                "description": "Using a rental ID, search for it and if it find, put new values",
                "tags": [
                    "Rental"
                ],
                "responses": {
                    "200": {
                        "description": "Rental updated with success"
                    },
                    "400": {
                        "description": "Rental id or content with format errors"
                    },
                    "404": {
                        "description": "Rental not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Rental"
                            },
                            "examples": {
                                "rental": {
                                    "value": {
                                        "nome": "GM S10 2.8",
                                        "cnpj": "16.670.085/0001-55",
                                        "atividades": "daleeeee",
                                        "endereco": [
                                            {
                                                "cep": "96200-200",
                                                "number":"1234",
                                                "isFilial": false
                                            },
                                            {
                                                "cep": "96200-500",
                                                "number":"5678",
                                                "complemento": "Muro A",
                                                "isFilial": true
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Route to get a rental data based on it's id",
                "description": "Try to find a rental",
                "tags": [
                    "Rental"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "It happens when ID format is wrong"
                    },
                    "200": {
                        "description": "Person found with success"
                    },
                    "404": {
                        "description": "Person not found"
                    }
                }
            }
        },
        "/api/v1/rental/{id}/reserve": {
            "post": {
                "summary": "insert a new reserve for the Id rental system",
                "description": "this route uses the req.body to insert reserve information in the database",
                "tags": [
                    "Reserve"
                ],
                "requestBody":{
                    "content":{
                        "application/json": {
                            "schema":{
                                "$ref":"#/components/schemas/Reserve"
                            }
                        }
                    }
                },
                "responses": {
                    "400":{
                        "description": "It happens if there's something wrong with request body or if car is already being rented for that time."
                    },
                    "201": {
                        "description": "It appears in case of success"
                    }
                }
            },
            "get": {
                "summary": "Get all reserves from the database that match your queries",
                "description": "Returns you an array of reserves suited to your request",
                "tags":[
                    "Reserves"
                ],
                "responses": {
                    "200":{
                        "description": "It shows up in case of success",
                        "content":{
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Reserves"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "It throws up if there's something wrong with you queries"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of reserves to show per page.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The page to show with (limit) amount of reserves.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "id_user",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The id of a person responsable by this reserve"
                    },
                    {
                        "in": "query",
                        "name": "data_inicio",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The first day a car will be rented"
                    },
                    {
                        "in": "query",
                        "name": "data_fim",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The last day someone will stay with the car"
                    },
                    {
                        "in": "query",
                        "name": "valor_final",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The full price of this rental"
                    },
                    {
                        "in": "query",
                        "name": "id_locadora",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The Id of the rental shop who's renting the car"
                    },
                    {
                        "in": "query",
                        "name": "id_carro",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The Id of the car being rented"
                    }
                ]
            }
        },
        "/api/v1/rental/{id}/reserve/{id2}": {
            "get": {
                "summary": "Get a reserve by it's id",
                "description": "It returns to you the requested reserve if it trully exists",
                "tags":["Reserve"],
                "parameters":[
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id2",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses":{
                    "400":{
                        "description": "It happens when ID format is wrong"
                    },
                    "200": {
                        "description": "It happens when everything runs fine"
                    },
                    "404": {
                        "description": "It shows up when given id's haven't been found"
                    }
                }
            },
            "put": {
                "summary": "Update reserve values",
                "description": "Using a reserve ID, search for it and if it find, put new values",
                "tags": [
                    "Reserve"
                ],
                "responses": {
                    "200": {
                        "description": "Reserve updated with success"
                    },
                    "400": {
                        "description": "Rental id or content with format errors, or dates passed are unavailable"
                    },
                    "404": {
                        "description": "Reserve not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id2",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Reserve"
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Route to delete a reserve based on it's id",
                "description": "Try to find a reserve and delete it",
                "tags": [
                    "Reserve"
                ],
                "responses": {
                    "404": {
                        "description": "Throw a NotFound, telling that there's no reserve with this id in the database"
                    },
                    "204": {
                        "description": "Reserve excluded with success"
                    },
                    "400": {
                        "description": "Invalid id format"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id2",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        },
        "/api/v1/rental/{id}/car": {
            "post":{
                "summary": "insert a new car in the fleet of a rental",
                "description": "this route uses the req.body to insert fleet information in the database",
                "tags": [
                    "Fleet"
                ],
                "requestBody":{
                    "content":{
                        "application/json": {
                            "schema":{
                                "$ref":"#/components/schemas/Fleet"
                            }
                        }
                    }
                },
                "responses": {
                    "400":{
                        "description": "It happens if there's something wrong with request body."
                    },
                    "201": {
                        "description": "It appears in case of success"
                    }
                }
            }
        },
        "/api/v1/rental/{id}/fleet": {
            "get": {
                "summary": "Get all fleet from the database that match your queries",
                "description": "Returns you an array of cars in a rental fleet suited to your request",
                "tags":[
                    "Fleet's"
                ],
                "responses": {
                    "200":{
                        "description": "It shows up in case of success",
                        "content":{
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Fleet's"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "It throws up if there's something wrong with you queries"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of reserves to show per page.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The page to show with (limit) amount of reserves.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "id_carro",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The id of a car in the fleet"
                    },
                    {
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The car status in the system (available or not)"
                    },
                    {
                        "in": "query",
                        "name": "data_fim",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The last day someone will stay with the car"
                    },
                    {
                        "in": "query",
                        "name": "valor_diaria",
                        "schema": {
                            "type": "number"
                        },
                        "description": "The cost per day to rent a car"
                    },
                    {
                        "in": "query",
                        "name": "id_locadora",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The Id of the rental shop who's renting the car"
                    },
                    {
                        "in": "query",
                        "name": "placa",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The identification plate of this car"
                    }
                ]
            }
        },
        "/api/v1/rental/{id}/fleet:{id2}": {
            "get": {
                "summary": "Get a fleet car by it's id",
                "description": "It returns to you the requested car if it trully exists",
                "tags":["Fleet"],
                "parameters":[
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id2",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses":{
                    "400":{
                        "description": "It happens when ID format is wrong"
                    },
                    "200": {
                        "description": "It happens when everything runs fine"
                    },
                    "404": {
                        "description": "It shows up when given id's haven't been found"
                    }
                }
            },
            "put": {
                "summary": "Update a fleet car values",
                "description": "Using a car ID, search for it and if it find, put new values",
                "tags": [
                    "Fleet"
                ],
                "responses": {
                    "200": {
                        "description": "Car updated with success"
                    },
                    "400": {
                        "description": "Rental/car id or content with format errors"
                    },
                    "404": {
                        "description": "Rental/car not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id2",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Fleet"
                            }
                        }
                    }
                }
            }, 
            "delete": {
                "summary": "Route to delete a car from the fleet based on it's id",
                "description": "Try to find a car from fleet and delete it",
                "tags": [
                    "Fleet"
                ],
                "responses": {
                    "404": {
                        "description": "Throw a NotFound, telling that there's no rental/car with this id in the database"
                    },
                    "204": {
                        "description": "Car excluded from fleet with success"
                    },
                    "400": {
                        "description": "Invalid id's format"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "path",
                        "name": "id2",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        }
        
    }
    
}